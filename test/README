<!--USER GUIDE-->

-- Run command syntax --
Jest can be initiated by calling ./jest.sh $ENDPOINT $JESTOPTIONS    

$ENDPOINT options -- local, test, production. Tests are set to point to a local SoGive instance default.
$JESTOPTIONS -- a list of optional Jest commands can be found at . These can be called 

Example command to test test server, while only running __tests__ files that contain some keyword 
    ./jest.sh test -t="some\skeyword"

Explain that Jest runs all files in __tests__ by default.
Can give regex pattern to -t="" in order to limit files tested. Note that this is based not on file name, but on name given to test().


<!--ROUGH NOTES-->

TODO
    Read headless from console
 
    Script to run/compile
    Alert if something's gone wrong
    Simple "everything fine" if nothing wrong. Sends out "flag" with details if something's wrong (email to office).
    true/false output for overall results
    Move common non-site specific bits in symlink
    Destructuring assignment in function args
    Import instead of require
    Screenshot on success as well as failure

 For README
 1) There is an issue with animations disrupting tests. Have created script to avoid this,
    but it has to be inserted onto the page each time that page.goto('url') is called.
    Have created a goto() method in each pages corresponding js file.
    This method handles this and any other future weirdness that may appear
    Hopefully puppeteer will have turning off animations as a standard feature later.
 
 2) Config files need to be babeled. Had hoped to simply write these in Node 6, 
    but puppeteer only works with Node 7 and above. Pay attention to babelrc config too. 
    Bit of a pain in the arse, but process fairly painless. Should add babeling to final bash script.
 
 3) Currently have "jest-style" test acting as a wrapper for original test file. Will probably
    discourage this practice. Should be very straightforward just to write the test within
    the Jest wrapper.
 
 4) Figured out that, despite what the Jest devs may claim, window works and global doesn't.
	Setting browser object to window.__BROWSER__ allows it to be accessed
	by test files and teardown. Still need to figure out how to get setup to run for
	each test though.

 5) Where there are multiple tests in the same file, Jest seems to choose to run these in series
    rather than parallel. Splitting slower tests across multiple files seems to force parallel tetsing
    Information on how Jest decides whether to use series or parallel available at https://github.com/facebook/jest/issues/5818 

 6) jest.config.json and package.json need to be symlinked from test-base to test folder before things will work.

 7) jest.config.json reads file paths relative to the --rootDir provided with npm command (defaults to directory containing config file).

 8) Important that you make use of UtilityFunctions.APIBASE for any goto() method calls you use. This is necessary to allow the bash script
    to switch between local, test and production.

 9) Can filter tests by running script with optional parameter "-t=<regex>" or "--testNamePattern=<regex>" (https://facebook.github.io/jest/docs/en/cli.html#testnamepattern-regex).
    Note that this filters by the name given to each test function and not by filename. 

Notes:
    Should we require that test names are not repeated? Might derease risk of screenshot/log overwriting ouput of other tests.
    Could take screenshots in afterEach and cache in temp directory. Reporter could retrieve these. Seems like this would just add overhead.
    Migtht be slightly neater to rename/repackage screenshots rather than mess about with a temp directory.

    Reporter waits until all tests in a suite have been completed before running => can assume that anything in afterEach has been called
    before we reach the reporter. Would there be any advantage in having afterEach generate the logfile (with the appropriate time-stamp),
    and then setting the reporter to detect and override?

    Would be nicer if reporter could handle creating/naming of eventual outputs. Is the only part that has automatic access to names of test files.
    Can we do away with strict timestamp requirements? Would still need some way of uniquely indentifying tests. Timestamp is a nice way of doing that.

    Told to only screenshot on success, only write log on fail. Simplifies things a good deal.

    Jest/Puppeteer will sometimes fail for silly reasons (page didn't load on time/element appeared after starting). If we're going to send out an email with error to office,
    might be worthwhile to have a later version retest the page a certain number of times. Only sends email if failure witnessed a certain percentage of the time.

    21/05/18
    TODO: 
        Add ability to easily switch between test/production/local when running tests

        Need someway of inserting a base URL into the test environment. Would be nice if this could be accomplished via the console.
        Simplest way of achieving this might be to have variable in setup_scripts that is trickled down to actual puppeteer files.
        Only methods that require a URL are page.goto() and our own goto() methods. Could be a fair amount of flexibility here
        Those lower level files aren't going to have direct access to the Jest run environment. Variable would have to be passed through as an arg.

        Seems we can just set testURL to be whatever we want the APIBASE to be. Variable is accessible everywhere via window.location

        Hook up screenshot/log outputs

    23/05/18
        Feel that tests need to be more reliable. Issue is with puppeteer, sometimes fails for no good reason.
        Known issues: slow-loading elements (large images), slow connection speed. 
        Wonder if using less strict selectors will help with slow-loading elements. Possible that they alter the DOM structure such that elements can no longer be found

    24/05/18
        See that there is an issue in that "DOM Loaded" event is fired as soon as the page appears with loading circle. Cheap workaround might be to make page wait until
        loader class is no longer present.
        Confirm that, with a minor addendum, the above does work nicely. Issue with the fact that page doesn't have loading div upon initial load => looking only for
        the absense of the loader doesn't work. Solution is to make the page wait until the loader has appeared then dissapeared.

        *Could we switch scraping for event IDs to just pulling from JSON endpoint? If that data is reachable, would be a much nicer solution
    
    25/05/18
        Login still seems a bit off. Will ocassionaly not type in the email field.
    
    28/05/18
        Want to add --debug option -- switches headless off and prevents automatic closing of browser. Not quite sure how to go about this. Jest does allow for setting
        globals, but this didn't seem to work properly last time I tried to use it. Aim is really just to pass some boolean variable to setup_scripts via console.

        Doesn't seem to be native way to pass argument to setup/config files. Is possible to set globals in Jest config. Hacky way to do this might be to set Global to 
        headless by default; if user gives --debug argument, have script edit line in script. Not the nicest way of doing things -- would need to remember to set it back/
        ensure that file isn't left in weird state.

        Tip does not seem to be displayed when full amount of donation is shown to user. Value is recorded though; would guess that it's doing Display(amount)
        rather than Display(amount + tip)